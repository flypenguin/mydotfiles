#!/usr/bin/env bash

# ###########################################################################
#                        .........................                          #
#                               VARIABLES                                   #
#                        .........................                          #
# ###########################################################################
#                                                                           #
# You can override those variables on the command line. You should not      #
# have to, though, with the _ONE_ exception of ...                          #
#                                                                           #
#   - "FORCE_JUMP=1"                                                        #
#                                                                           #
# ###########################################################################


# override if needed
SSH_KEY_FILE="${SSH_KEY_FILE:-}"
FORCE_JUMP="${FORCE_JUMP:-}"
SSH_KEY_FILE="${SSH_KEY_FILE:-$HOME/.ssh/id_rsa.pub}"

# you should not need to override those
DEFAULT_LOGIN_USER="${DEFAULT_LOGIN_USER:-ubuntu}"
TARGET_USER="${TARGET_USER:-}"
JUMP_USER="${JUMP_USER:-}"

# you really SHOULD NOT override those
EC2_CONNECT_USER_TAG="${EC2_CONNECT_USER_TAG:-ec2-connect-user}"
EC2_BASTION_HOST_TAG="${EC2_BASTION_HOST_TAG:-bastion-host}"


# ###########################################################################
#                        .........................                          #
#                                                                           #
#                                 START                                     #
#                                                                           #
#                        .........................                          #
# ###########################################################################
#                                                                           #
# DO NOT change anything below here, unless you really know what you're     #
# doing. I mean it. :)                                                      #
#                                                                           #
# ###########################################################################



help() {
  echo ""
  echo ""
  echo "USAGE: $(basename $0) CONNECTION_THING [ssh-param ...]"
  echo ""
  echo "'CONNECTION_THING' can be one of ..."
  echo "  - '-s'              <--   (you might want this :)"
  echo "  - HOSTNAME_OR_IP          (must be public)"
  echo "  - 'i-......'              (AWS instance ID)"
  echo ""
  echo ""
  echo "Available environment variables (can be combined):"
  echo ""
  echo "    \$ (JUMP|TARGET)_USER=myuser   $(basename $0) -s"
  echo "       |  forces the user name of the bastion host and/or"
  echo "       L  final target host user"
  echo ""
  echo "    \$ FORCE_JUMP=1                $(basename $0) i-0deadbeef12345"
  echo "       L  will go via jump host even if target host has a public IP"
  echo ""
  echo "    \$ SSH_KEY_FILE=./my_key.pub   $(basename $0) host.doma.in"
  echo "       L  use this SSH key to connect to the target hosts"
  echo ""
  echo ""
  echo "For the script to work, those tools are required:"
  echo ""
  echo "    Tool        Install on Mac            Install on Debian/Ubuntu"
  echo "    ......      ........................  ..........................."
  echo "    aws         brew install awscli       apt-get install -y awscli"
  echo "    bash v5+    brew install bash                 --"
  echo "    dig         (pre-installed)           apt-get install -y dnsutils"
  echo "    fzf         brew install fzf          apt-get install -y fzf"
  echo "    GNU grep    brew install grep                 --"
  echo "    jq          brew install jq           apt-get install -y jq"
  echo ""
  echo ""
  exit 255
}


# $1 - output message
# $2 - instance JSON without "surrounding stuff" (only the inner object)
# $3 - login user name
prime() {
  local AZONE=$(echo "$2" | jq -r '.Placement.AvailabilityZone')
  local IID=$(echo "$2" | jq -r '.InstanceId')
  local VPCID=$(echo "$2" | jq -r '.VpcId')
  local PUBLIC_IP=$(echo "$2" | jq -r '.PublicIpAddress')
  local LOGIN_USER="${3:-DEFAULT_LOGIN_USER}"
  printf "%-32s: %s\\n" "*** Enabling SSH key for ***" "$1"
  local CLI_JSON=$(aws ec2-instance-connect send-ssh-public-key \
    --availability-zone $AZONE \
    --instance-id $IID \
    --instance-os-user $LOGIN_USER \
    --ssh-public-key "file://$SSH_KEY_FILE" \
  )
  local REQ_ID="$(echo $CLI_JSON | jq -r .RequestId)"
  local SUCCESS="$(echo $CLI_JSON | jq -r .Success)"
  printf "%-32s: %s\\n" "Host public IP address" "$PUBLIC_IP"
  printf "%-32s: %s\\n" "AWS VPC / instance ID" "$VPCID / $IID"
  printf "%-32s: %s\\n" "Enabled login user" "$LOGIN_USER"
  printf "%-32s: %s\\n" "Connect Request ID / status" "$REQ_ID (Success=$SUCCESS)"
  echo ""
}


# $1 - JSON structure
# $2 - jq expression
get_field() {
  local FIELD_VALUE="$(echo "$1" | jq -r "$2")"
  if [[ $FIELD_VALUE = "null" ]] || [[ -z $FIELD_VALUE ]]; then
    echo ""
  else
    echo "$FIELD_VALUE"
  fi
}


# $1 - JSON structure
# $2 - tag key name
# $3 - default value, or nothing
get_tag() {
  local FIELD_VALUE="$(echo "$1" | jq -r ".Tags[] | select(.Key==\"$2\").Value")"
  if [[ $FIELD_VALUE = "null" ]] || [[ -z $FIELD_VALUE ]]; then
    echo "${3:-}"
  else
    echo "$FIELD_VALUE"
  fi
}


# $1 - host JSON (just the inner object)
get_target_public_ip() {
  echo "$(get_field "$1" ".PublicIpAddress")"
}


# $1 - host JSON (just the inner object)
get_target_private_ip() {
  echo "$(get_field "$1" ".PrivateIpAddress")"
}


# $1 - host JSON (just the inner object)
# $2 - a default login user if no user was found
get_ec2c_login_name() {
  echo "$(get_tag "$1" "$EC2_CONNECT_USER_TAG" "${2:-$DEFAULT_LOGIN_USER}")"
}


# $1 - target host json (only the object, not the outer stuff)
find_bastion_for_target() {
  local VPC_ID=$(get_field "$1" ".VpcId")
  local TMP_JSON="$(aws ec2 describe-instances \
    --filters Name=vpc-id,Values=$VPC_ID \
              Name=tag-key,Values="$EC2_BASTION_HOST_TAG" \
    | jq -r '.Reservations[0].Instances[0]')"
  if [[ $TMP_JSON == "null" ]] || [[ -z $TMP_JSON ]]; then
    echo ""
  else
    echo "$TMP_JSON"
  fi
}


# all parameters go directly to 'ssh'
# we rely on the following variables to be set:
#    JSON         the target host JSON object
#    HOST         FQDN of the target, empty if not known
ssh_into() {
  printf "%-32s: %s\\n" "Using SSH key file" "$SSH_KEY_FILE"
  IP=$(get_field "$JSON" ".PublicIpAddress")

  if [[ -z $IP ]] || [[ -n "${FORCE_JUMP:-}" ]]; then
    printf "%-32s: %s\\n\\n" "NOTE" "Locating bastion host (no public IP, or FORCE_JUMP set)"
    JUMP_JSON="$(find_bastion_for_target "$JSON")"
    if [ -z "$JUMP_JSON" ]; then
      HOST=""
      SSH_PARAMS=""
      printf "%-32s: %s\\n" "NOTE" "Could not find bastion host, skipping SSH"
    else
      HOST="$(get_target_private_ip "$JSON")"
      JUMP_HOST="$(get_target_public_ip "$JUMP_JSON")"
      [[ -n $JUMP_USER ]] || JUMP_USER="$(get_ec2c_login_name "$JUMP_JSON")"
      SSH_PARAMS="-J $JUMP_USER@$JUMP_HOST"
      prime "bastion host" "$JUMP_JSON" "$JUMP_USER"
    fi
  else
    HOST="${HOST:-$IP}"
    SSH_PARAMS=""
  fi

  if [[ -z $HOST ]] || [[ $HOST = "null" ]]; then
    printf "%-32s: %s\\n" "NOTE" "No HOST found, not executing SSH"
    printf "%-32s: %s\\n" "Execution status" "Success=$(echo $JSON | jq -r .Success)"
  else
    [[ -n $TARGET_USER ]] || TARGET_USER="$(get_ec2c_login_name "$JSON")"
    prime "target host" "$JSON" "$TARGET_USER"
    set -x
    exec ssh -o StrictHostKeyChecking=no -A $SSH_PARAMS "$TARGET_USER@$HOST" "$@"
  fi
}


# displays a list of all running instances and lets the user select one.
# prints ("returns") the instance json to the caller.
select_instance() {
    declare -A VPCS
  while read vpc_id vpc_name
  do
    VPCS[$vpc_id]="$vpc_name"
  done <<< $(
    # https://stackoverflow.com/a/16854326
    aws ec2 describe-vpcs \
      --query "Vpcs[*].[VpcId, (Tags[?Key=='Name'].Value | [0]) || '-']" \
      --output text
  )

  declare -A INSTANCE_NAMES
  declare -A INSTANCE_VPCS
  declare -A INSTANCE_IPS
  while read vpc_id instance_id instance_ipaddress instance_name
  do
    INSTANCE_NAMES[$instance_id]="$instance_name"
    INSTANCE_IPS[$instance_id]="$instance_ipaddress"
    INSTANCE_VPCS[$instance_id]="$vpc_id"
  done <<< $(
    # https://stackoverflow.com/a/16854326
    aws ec2 describe-instances \
      --query "Reservations[*].Instances[*].[VpcId, InstanceId, PrivateIpAddress, (Tags[?Key=='Name'].Value | [0]) || '-']" \
      --filters Name=instance-state-name,Values=running \
      --output text
  )

  FZF_FILE="$(mktemp)"
  for instance_id in "${!INSTANCE_NAMES[@]}"; do
      vpc_id="${INSTANCE_VPCS[$instance_id]}"
      #echo vpc_id=$vpc_id
      vpc_name="${VPCS[$vpc_id]}"
      #echo vpc_name=$vpc_name
      instance_name="${INSTANCE_NAMES[$instance_id]}"
      instance_ipaddress="${INSTANCE_IPS[$instance_id]}"
      printf "%-23s" "$vpc_id"
      printf "%-22s" "$instance_id"
      printf "%-17s" "$instance_ipaddress"
      printf "[%-30s]    " "$vpc_name"
      printf "%-s" "$instance_name"
      printf "\n"
  done | sort > "$FZF_FILE"

  read vpc_id instance_id instance_ipaddress rest <<< $(fzf < "$FZF_FILE")

  aws ec2 describe-instances --instance-ids $instance_id --output json | jq '.Reservations[0].Instances[0]'
}


check_requirements() {
  for cmd in aws dig fzf jq ; do
    if not command -v $cmd > /dev/null ; then
      echo "ERROR: Required command '$cmd' is not installed."
      echo "Aborting."
      exit 255
    fi
  done

  if ! grep --help 2>&1 | grep -q gnu ; then
    echo "ERROR: You are not using GNU grep."
    echo "       On a mac, use homebrew to install it, then add it to"
    echo "       your path (which you must do manually)."
    echo "       Installation (Mac):"
    echo "         brew install grep"
    echo "       Add to path (Mac):"
    echo "         export PATH=\"/usr/local/opt/grep/libexec/gnubin:\$PATH\""
    exit 255
  fi

  if ! bash --version 2>&1 | grep -q "version 5" ; then
    echo "ERROR: You are not using bash v5+"
    echo "       On a mac, use homebrew to install it."
    echo "       Installation (Mac):"
    echo "         brew install bash"
    exit 255
}


# ###########################################################################
#                        .........................                          #
#                                                                           #
#                             EXECUTION START                               #
#                                                                           #
#                        .........................                          #
# ###########################################################################


IP=""
HOST=""

set -euo pipefail

if [ -z "$1" -o "$1" = "-h" ]; then
  help
  exit 255
fi

check_requirements

if [[ $1 = "-s" ]]; then

  # let the user select an instance from a list of all instances
  JSON="$(select_instance)"

elif echo $1 | grep -qE 'i-[a-z0-9]{8}([a-z0-9]{9})?$' ; then

  # use the instance id given. (WARNING: no error check :/ ...)
  printf "%-32s: %s\\n" "AWS instance ID given" "$1"
  JSON=$(aws ec2 describe-instances --instance-ids $1 --output json | jq '.Reservations[0].Instances[0]')

else

  # interpret parameter either as ...
  if echo $1 | grep -qP '^(\d+\.){3}\d+$' ; then
    # IP, or ...
    HOST="$1"
    IP="$1"
  else
    # ... host name, which will be resolved.
    # (again no error check if host not found)
    HOST="$1"
    IP=$(dig +short $HOST)
    printf "%-32s: %s\\n" "Resolving host name" "$HOST"
  fi
  printf "%-32s: %s\\n" "IP" "$IP"
  JSON=$(aws ec2 describe-instances --filter Name=ip-address,Values=$IP --output json | jq '.Reservations[0].Instances[0]')

fi

# "remove" param 1
shift

# "do it" :)
ssh_into "$@"
