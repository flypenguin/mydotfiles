#!/usr/bin/env bash

SETTINGS_FILE="$HOME/.aws/c11h-settings"
CREDENTIALS_FILE="$HOME/.aws/credentials"
TMPFILE=$(mktemp)


activate_tmp_file() {
  # move the temp file back to the original location
  cat "$TMPFILE" \
    | sort  \
    | grep -Ev '^ *(#.*)?$' \
    > "$SETTINGS_FILE"
}

# $1 - the new default profile
set_default_profile() {
  cat "$SETTINGS_FILE" \
    | grep -v "^DEFAULT_MFA_PROFILE=" \
    > "$TMPFILE"
  echo "DEFAULT_MFA_PROFILE=$1" >> "$TMPFILE"
  activate_tmp_file
}

# Sets SOURCE_PROFILE and TARGET_PROFILE
# takes the same arguments as the main script
set_refresh_parameters() {
  if [ "$1" == "" ] ; then
    if [ -z "$DEFAULT_MFA_PROFILE" ]; then
      echo "Default profile not set. Please define default profile using"
      echo "the 'setdefault' command, or specify profile name explicitly."
      exit -1
    fi
    SOURCE_PROFILE="$DEFAULT_MFA_PROFILE"
  else
    SOURCE_PROFILE="$1"
  fi
  echo "DEBUG ::::::::::::::"
  echo "\$1 = $1"
  echo "\$2 = $2"
  echo "DEBUG ::::::::::::::"
  [ -z "$2" ] && TARGET_PROFILE='default' || TARGET_PROFILE="$2"

  eval MFA_ARN=\$MFA_$SOURCE_PROFILE
  if [ -z "$MFA_ARN" ] ; then
    echo "Could not find MFA ARN for source profile '$SOURCE_PROFILE'"
    exit -1
  fi
}



if [ "$1" == "-h" ]; then

  echo ""
  echo "USAGE: "
  echo ""
  echo "  $(basename $0) add PROFILE_NAME MFA_ARN [-d]"
  echo ""
  echo "    Adds a new profile with ARN, and optionally sets the profile as"
  echo "    the default profile."
  echo ""
  echo ""
  echo "  $(basename $0) [PROFILE_NAME [TARGET_PROFILE_NAME]]"
  echo ""
  echo "    Refreshes credentials for the default profile, or the profile"
  echo "    given as 1st parameter. It will be saved under the 'default'"
  echo "    profile, or the profile name given as 2nd parameter."
  echo ""
  echo ""
  echo "  $(basename $0) del PROFILE_NAME"
  echo ""
  echo "    Removes a configured profile."
  echo ""
  echo ""
  echo "  $(basename $0) setdefault PROFILE_NAME"
  echo ""
  echo "    Sets a profile as new default profile."
  echo ""
  echo ""
  echo "  $(basename $0) clear"
  echo ""
  echo "    Clears everything."
  echo ""
  echo ""
  echo "  $(basename $0) -h"
  echo ""
  echo "    Prints this help text."
  echo ""
  echo ""

  exit

# ===========================================================================
elif [ "$1" == "clear" ]; then

  rm -f "$SETTINGS_FILE"
  echo "Settings file deleted. You need to re-add all profiles again."

# ===========================================================================
elif [ "$1" == "del" ]; then

  if [ "$2" == "" ]; then
    echo "Please give the profile name to delete."
    exit -1
  fi

  cat "$SETTINGS_FILE" \
    | grep -v "MFA_${2}=" \
    > "$TMPFILE"

  activate_tmp_file

  echo "Done."

# ===========================================================================
elif [ "$1" == "default" ]; then

  if [ "$1" == "" ]; then
    echo "You need to give the profile name as parameter."
    exit -2
  fi

  set_default_profile $1

# ===========================================================================
elif [ "$1" == "add" ]; then

  if [ -z "$3" ] ; then
    echo ""
    echo "You must specify a profile to add."
    echo ""
    echo "That profile needs to be configured in \$HOME/.aws/credentials like this:"
    echo "  [SOURCE_PROFILE]"
    echo "  aws_access_key_id=SOME_TEXT"
    echo "  aws_secret_access_key=SOME_MORE_TEXT"
    echo "It's the SOURCE_PROFILE you're looking for, and it MUST NOT BE 'default', because"
    echo "this script regularly overwrites the 'default' profile."
    echo ""
    echo "PLEASE ALSO NOTE that your 'default' profile, if present, MUST NOT contain"
    echo "any blank lines and MUST end with one!"
    echo ""
    echo "You can find the MFA ARN by doing this:"
    echo "  * open AWS console"
    echo "  * open IAM"
    echo "  * select your user"
    echo "  * go to 'Security Credentials' tab"
    echo "It's next to 'Assigned MFA device'."
    echo ""
    echo "PROBABLY YOU WANT TO DO THIS:"
    echo ""
    echo "  $(basename $0)   add   PROFILENAME   MFAID   -d"
    echo ""
    echo "(the -d sets the profile as the default profile to be used)"
    echo ""

    exit
  fi

  PROFILE_NAME="$2"
  MFA_ARN="$3"

  echo ""
  echo "Adding"
  echo "PROFILE NAME: $PROFILE_NAME"
  echo "MFA ARN     : $MFA_ARN"
  echo ""
  echo "is this correct? (y/n)"
  echo -n "> "

  read ANSWER

  if [ "$ANSWER" != "y" ] ; then
    echo "Abort."
    exit -1
  fi

  unset DEFAULT_MFA_PROFILE
  [ -f "$SETTINGS_FILE" ] && source "$SETTINGS_FILE" || touch "$SETTINGS_FILE"

  # remove the profile we are adding just now (in case we're just modifying
  # it ;) from the settings file, and also the default profile (cause we
  # will re-set it later)
  cat "$SETTINGS_FILE" \
    | grep -v "MFA_${PROFILE_NAME}=" \
    | grep -v "DEFAULT_MFA_PROFILE" \
    > "$TMPFILE"

  # save the new profile in the settings (temp) file
  echo -e "MFA_${PROFILE_NAME}=$MFA_ARN" >> "$TMPFILE"

  # re-set the default profile
  [ "$4" == "-d" ] && USE_DEFAULT="$PROFILE_NAME" || USE_DEFAULT="$DEFAULT_MFA_PROFILE"

  activate_tmp_file "$TMPFILE"
  set_default_profile "$USE_DEFAULT"

  echo "Settings saved in $SETTINGS_FILE"

# ===========================================================================
# default mode - refresh cli credentials
else

  set -e

  if [ -f "$SETTINGS_FILE" ]; then
    source "$SETTINGS_FILE"
  else
    echo "No settings file found. Please add profiles using 'add' command."
    exit -1
  fi

  # sets SOURCE_PROFILE, TARGET_PROFILE, MFA_ARN
  set_refresh_parameters "$@"

  echo "Using source profile: $SOURCE_PROFILE"
  echo "Using target profile: $TARGET_PROFILE"
  echo -n "Enter current token code: "
  read TOKEN_CODE

  CREDS=$(aws sts get-session-token --profile $SOURCE_PROFILE --serial-number $MFA_ARN --token-code $TOKEN_CODE)

  cat > $TMPFILE <<EOF
[$TARGET_PROFILE]
aws_access_key_id=$(echo $CREDS | jq '.Credentials.AccessKeyId' -r)
aws_secret_access_key=$(echo $CREDS | jq '.Credentials.SecretAccessKey' -r)
aws_session_token=$(echo $CREDS | jq '.Credentials.SessionToken' -r)

EOF

  # append filtered credentials file to tmp file
  cat "$CREDENTIALS_FILE" | sed -r "/\[$TARGET_PROFILE\]/,/^ *$/d" >> $TMPFILE

  echo "DEBUG ============"
  cat "$TMPFILE"
  echo "DEBUG ============"

  # ... activate :)
  mv -f "$TMPFILE" "$CREDENTIALS_FILE"
  chmod 600 "$CREDENTIALS_FILE"

fi

rm -f "$TMPFILE"
