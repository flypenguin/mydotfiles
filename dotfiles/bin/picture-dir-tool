#!/usr/bin/env python3

import subprocess
import sys
from argparse import ArgumentParser
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime as dt
from os import walk
from os.path import join, relpath
from pathlib import Path
from typing import Tuple


def cmdline_thumb_img(src_file, dst_dir, config) -> Tuple[Path, list]:
    dst_file = str(dst_dir / src_file.stem) + "." + config.img_format
    cmd = [
        "convert",
        str(src_file),
        "-quality",
        config.img_quality,
        "-resize",
        f"{config.img_size}>",
        "-auto-orient",
        dst_file,
    ]
    return Path(dst_file), cmd


def cmdline_thumb_video(
    src_file,
    dst_dir,
    config,
    add_params=None,
) -> Tuple[Path, list]:
    # create thumb VIDEOS
    # sources: https://stackoverflow.com/a/20848224, https://superuser.com/a/567934
    dst_file = str(dst_dir / src_file.stem) + ".mp4"
    Path(dst_file).unlink(missing_ok=True)
    add_params = add_params or []
    cmd = (
        [
            "ffmpeg",
            "-loglevel",
            "error",
            "-i",
            str(src_file),
            "-movflags",
            "faststart",
            "-c:v",
            "libx265",
            "-crf",
            f"{config.vid_crf}",
            "-tag:v",
            "hvc1",
            "-filter:v",
            (
                "scale="
                f"'min({config.vid_res},iw)':'min({config.vid_res},ih)'"
                ":force_original_aspect_ratio=decrease"
                ","
                "pad="
                f"width='ceil(min({config.vid_res},iw)/4)*4':height='ceil(min({config.vid_res},ih)/4)*4'"
            ),
        ]
        + add_params
        + [
            dst_file,
        ]
    )
    return Path(dst_file), cmd


def cmdline_thumb_gif(src_file, dst_dir, config) -> Tuple[Path, list]:
    # animated gif?
    # https://stackoverflow.com/a/1413234
    cmd = ["identify", str(src_file)]
    res = subprocess.run(cmd, capture_output=True)
    if "gif[1]" in str(res.stdout) and config.gif_format == "vid":
        # https://unix.stackexchange.com/a/294892
        return cmdline_thumb_video(
            src_file, dst_dir, add_params=["-pix_fmt", "yuv420p"]
        )
    else:
        return cmdline_thumb_img(src_file, dst_dir)


RAW_EXTS = [
    "arw",
    "cr2",
    "crw",
    "dcr",
    "dng",
    "nef",
    "raf",
    "srf",
]

EXT_MAP = {
    "avi": cmdline_thumb_video,
    "cr2": cmdline_thumb_img,
    "gif": cmdline_thumb_gif,
    "heic": cmdline_thumb_img,
    "jpeg": cmdline_thumb_img,
    "jpg": cmdline_thumb_img,
    "mkv": cmdline_thumb_video,
    "mov": cmdline_thumb_video,
    "mp4": cmdline_thumb_video,
    "nef": cmdline_thumb_img,
    "orf": cmdline_thumb_img,
    "png": cmdline_thumb_img,
    "webp": cmdline_thumb_img,
}

VALID_EXTS = list(EXT_MAP.keys())


def dst_dir_for(base_dir, src_file, config):
    rel = relpath(src_file, base_dir)
    return (Path(str(base_dir) + config.suffix) / rel).parent


class EncodeFile:
    src_file: Path
    dst_dir: Path
    config: object

    def __init__(self, src_file, dst_dir: Path, config: object) -> None:
        self.src_file = src_file
        self.dst_dir = dst_dir
        self.config = config

    def create_thumb(self) -> Tuple[int, str]:
        self.dst_dir.mkdir(parents=True, exist_ok=True)
        func = EXT_MAP[self.src_file.suffix[1:].lower()]
        dst_file, cmdline = func(self.src_file, self.dst_dir, self.config)
        res = subprocess.run(
            cmdline,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            check=True,
        )
        return res.returncode, str(res.stdout)

    def __str__(self):
        return f"{self.src_file}  ->  {self.dst_dir}"


def encode(encode_me: EncodeFile):
    rv = encode_me.create_thumb()
    return rv


# https://stackoverflow.com/a/34482761
def progressbar(it, prefix="", size=60, out=sys.stdout, num_items=0):  # Python3.3+
    count = num_items or len(it)

    def show(j):
        x = int(size * j / count)
        print(
            "{}[{}{}] {}/{}".format(prefix, "#" * x, "." * (size - x), j, count),
            end="\r",
            file=out,
            flush=True,
        )

    show(0)
    for i, item in enumerate(it):
        yield item
        show(i + 1)
    print("", flush=True, file=out)


def parallel_convert(base_dir, files_to_encode, config):
    num_workers = config.num_workers or None
    with ThreadPoolExecutor(max_workers=num_workers) as executor:
        futures = [executor.submit(encode, ifile) for ifile in files_to_encode]
        for future in progressbar(
            as_completed(futures),
            f"{base_dir.name} ",
            num_items=len(files_to_encode),
        ):
            pass


def create_thumbnails_for_dir(base_dir: Path, config: object):
    tmp0 = {}

    for dirpath, _, files in walk(base_dir):
        for f in files:
            f = join(dirpath, f)
            lower_f = f.lower()
            ext = lower_f.split(".")[-1].lower()
            if ext not in VALID_EXTS:
                continue
            encode_me = EncodeFile(Path(f), dst_dir_for(base_dir, f, config), config)
            tmp0[lower_f] = encode_me

    # check for apple HEIC image + mov - if a HEIC image with the same name exists we
    # skip this MOV file to save time, because it's an apple "live photo"
    files_to_encode = []
    for f, encode_me in tmp0.items():
        tmp1 = Path(f)
        if tmp1.suffix != ".mov":
            files_to_encode.append(encode_me)
        else:
            heic_chk = str(tmp1.parent / tmp1.stem) + ".heic"
            if heic_chk not in tmp0:
                files_to_encode.append(encode_me)

    if len(files_to_encode) == 0:
        print(f"No images found in: {base_dir}")
        return

    parallel_convert(base_dir, files_to_encode, config)


def move_raw_files_out(base_dir, config):
    files_to_move = []  # (src_file, dst_dir) tuples
    files_to_convert = []  # EncodeFile objects

    for dirpath, _, files in walk(base_dir):
        for f in files:
            f = join(dirpath, f)
            lower_f = f.lower()
            ext = lower_f.split(".")[-1].lower()
            if ext not in RAW_EXTS:
                continue
            files_to_move.append((Path(f), dst_dir_for(base_dir, f, config)))

    if len(files_to_move) == 0:
        print(f"Now RAW files found in: {base_dir}")
        return

    # create directories
    dirs_to_create = set([item[1] for item in files_to_move])
    for dir_to_create in dirs_to_create:
        dir_to_create.mkdir(exist_ok=True, parents=True)

    for src_file, dst_dir in progressbar(files_to_move, f"{base_dir.name} (move)"):
        dst_file = dst_dir / src_file.name
        src_file.rename(dst_file)
        files_to_convert.append(EncodeFile(dst_file, src_file.parent, config))

    parallel_convert(base_dir, files_to_convert, config)


def cmd_create_thumbs(config):
    for base_dir in config.img_dirs:
        if not Path(base_dir).is_dir():
            print(f"Not a directory: {base_dir}")
            continue
        create_thumbnails_for_dir(base_dir, config)


def cmd_extract_raws(config):
    for base_dir in config.img_dirs:
        if not Path(base_dir).is_dir():
            print(f"Not a directory: {base_dir}")
            continue
        move_raw_files_out(base_dir, config)


def main():
    root_parser = ArgumentParser()
    subparsers = root_parser.add_subparsers(
        title="subcommands",
        help="sub commands help",
        required=True,
    )

    # create thumbnails
    parser = subparsers.add_parser(
        "create-thumbnails",
        help=(
            "creates a directory next to the given ones with thumbnail versions of all "
            "images"
        ),
    )
    parser.add_argument("img_dirs", type=Path, nargs="+")
    parser.add_argument("--vid-res", default="540", help=f"default: 540")
    parser.add_argument("--vid-crf", default="30", help=f"default: 33")
    parser.add_argument("-q", "--img-quality", default="65", help=f"default: 65")
    parser.add_argument("--img-size", default="1920x1080", help=f"default: 1920x1080")
    parser.add_argument("--img-format", default="webp", help=f"default: webp")
    parser.add_argument(
        "--gif-format", choices=["img", "vid"], default="vid", help=f"default: vid"
    )
    parser.add_argument("-s", "--suffix", default=".thumbs", help=f"default: .thumbs")
    parser.add_argument("-n", "--num-workers", type=int, default=0, help=f"default: 0")
    parser.set_defaults(func=cmd_create_thumbs)

    # convert all
    parser = subparsers.add_parser(
        "extract-raw",
        help=(
            "moves all RAW files out of the given directories into a new one next to it"
            "and replaces them with JPEGs"
        ),
    )
    parser.add_argument("img_dirs", nargs="+", type=Path)
    parser.add_argument("--vid-res", default="10000", help=f"default: 540")
    parser.add_argument("--vid-crf", default="24", help=f"default: 24")
    parser.add_argument("-q", "--img-quality", default="85", help=f"default: 85")
    parser.add_argument(
        "--img-size", default="30000x30000", help=f"default: 30000x30000"
    )
    parser.add_argument("--img-format", default="jpg", help=f"default: jpg")
    parser.add_argument(
        "-s", "--suffix", default=".raw-files", help=f"default: .raw-files"
    )
    parser.add_argument("-n", "--num-workers", type=int, default=0, help=f"default: 0")
    parser.set_defaults(func=cmd_extract_raws)

    # parse args
    config = root_parser.parse_args()
    config.func(config)


if __name__ == "__main__":
    # prevent cluttering of global namespace ...
    main()
