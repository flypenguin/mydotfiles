#!/usr/bin/env python

import subprocess
import sys
from argparse import ArgumentParser
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime as dt
from os import walk
from os.path import join, relpath
from pathlib import Path
from typing import Tuple

config = None


def cmdline_img(src_file, dst_dir) -> Tuple[Path, list]:
    dst_file = str(dst_dir / src_file.stem) + "." + config.thumb_format
    cmd = [
        "convert",
        str(src_file),
        "-quality",
        config.thumb_quality,
        "-resize",
        f"{config.thumb_size}>",
        "-auto-orient",
        dst_file,
    ]
    return Path(dst_file), cmd


def cmdline_video(src_file, dst_dir, add_params=None) -> Tuple[Path, list]:
    # create thumb VIDEOS
    # sources: https://stackoverflow.com/a/20848224, https://superuser.com/a/567934
    dst_file = str(dst_dir / src_file.stem) + ".mp4"
    Path(dst_file).unlink(missing_ok=True)
    add_params = add_params or []
    cmd = (
        [
            "ffmpeg",
            "-loglevel",
            "error",
            "-i",
            str(src_file),
            "-movflags",
            "faststart",
            "-c:v",
            "libx265",
            "-crf",
            f"{config.video_crf}",
            "-tag:v",
            "hvc1",
            "-filter:v",
            (
                "scale="
                f"'min({config.video_res},iw)':'min({config.video_res},ih)'"
                ":force_original_aspect_ratio=decrease"
                ","
                "pad="
                f"width='ceil(min({config.video_res},iw)/4)*4':height='ceil(min({config.video_res},ih)/4)*4'"
            ),
        ]
        + add_params
        + [
            dst_file,
        ]
    )
    return Path(dst_file), cmd


def cmdline_gif(src_file, dst_dir) -> Tuple[Path, list]:
    # animated gif?
    # https://stackoverflow.com/a/1413234
    cmd = ["identify", str(src_file)]
    res = subprocess.run(cmd, capture_output=True)
    if "gif[1]" in str(res.stdout) and config.gif_format == "vid":
        # https://unix.stackexchange.com/a/294892
        return cmdline_video(src_file, dst_dir, add_params=["-pix_fmt", "yuv420p"])
    else:
        return cmdline_img(src_file, dst_dir)


EXT_MAP = {
    "avi": cmdline_video,
    "cr2": cmdline_img,
    "gif": cmdline_gif,
    "heic": cmdline_img,
    "jpeg": cmdline_img,
    "jpg": cmdline_img,
    "mkv": cmdline_video,
    "mov": cmdline_video,
    "mp4": cmdline_video,
    "nef": cmdline_img,
    "png": cmdline_img,
    "webp": cmdline_img,
}

VALID_EXTS = list(EXT_MAP.keys())


class EncodeFile:
    base: Path
    src_file: Path
    dst_file: Path
    cmdline: list

    def __init__(self, base: Path, src_file: Path) -> None:
        self.base = base
        self.src_file = src_file
        func = EXT_MAP[self.src_file.suffix[1:].lower()]
        self.dst_file, self.cmdline = func(self.src_file, self.dst_dir)

    @property
    def dst_dir(self) -> Path:
        rel = relpath(self.src_file, self.base)
        return (Path(str(self.base) + ".thumbs") / rel).parent

    def create_thumb(self) -> Tuple[int, str]:
        self.dst_dir.mkdir(parents=True, exist_ok=True)
        res = subprocess.run(
            self.cmdline,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            check=True,
        )
        return res.returncode, str(res.stdout)

    def __str__(self):
        return f"{self.src_file}  ->  {self.dst_dir}"


def encode(encode_me: EncodeFile):
    rv = encode_me.create_thumb()
    return rv


# https://stackoverflow.com/a/34482761
def progressbar(it, prefix="", size=60, out=sys.stdout, num_items=0):  # Python3.3+
    count = num_items or len(it)

    def show(j):
        x = int(size * j / count)
        print(
            "{}[{}{}] {}/{}".format(prefix, "#" * x, "." * (size - x), j, count),
            end="\r",
            file=out,
            flush=True,
        )

    show(0)
    for i, item in enumerate(it):
        yield item
        show(i + 1)
    print("", flush=True, file=out)


def create_thumbs():
    tmp0 = {}

    for base_dir in config.img_dirs:
        if not Path(base_dir).is_dir():
            print(f"Not a directory: {base_dir}")
            sys.exit()

    for base_dir in config.img_dirs:
        for dirpath, _, files in walk(base_dir):
            for f in files:
                f = join(dirpath, f)
                lower_f = f.lower()
                ext = lower_f.split(".")[-1].lower()
                if ext not in VALID_EXTS:
                    continue
                encode_me = EncodeFile(Path(base_dir), Path(f))
                tmp0[lower_f] = encode_me

    # check for apple HEIC image + mov - if a HEIC image with the same name exists we
    # skip this MOV file to save time, because it's an apple "live photo"
    files_to_encode = []
    for f, encode_me in tmp0.items():
        tmp1 = Path(f)
        if tmp1.suffix != ".mov":
            files_to_encode.append(encode_me)
        else:
            heic_chk = str(tmp1.parent / tmp1.stem) + ".heic"
            if heic_chk not in tmp0:
                files_to_encode.append(encode_me)

    num_workers = config.num_workers or None
    with ThreadPoolExecutor(max_workers=num_workers) as executor:
        futures = [executor.submit(encode, ifile) for ifile in files_to_encode]
        for future in progressbar(
            as_completed(futures),
            "Creating thumbnails ",
            num_items=len(files_to_encode),
        ):
            pass


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("img_dirs", nargs="+")
    parser.add_argument("--video-res", default="540", help=f"default: 540")
    parser.add_argument("--video-crf", default="30", help=f"default: 33")
    parser.add_argument("--thumb-quality", default="65", help=f"default: 65")
    parser.add_argument("--thumb-size", default="1920x1080", help=f"default: 1920x1080")
    parser.add_argument("--thumb-format", default="webp", help=f"default: webp")
    parser.add_argument(
        "--gif-format", choices=["img", "vid"], default="vid", help=f"default: vid"
    )
    parser.add_argument("-n", "--num-workers", type=int, default=0, help=f"default: 0")
    config = parser.parse_args()
    create_thumbs()
