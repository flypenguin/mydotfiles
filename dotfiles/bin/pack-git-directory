#!/usr/bin/env bash

FORCE=0
PREFIX=""
TARGET_DIR="."
DATE_FORMAT="%Y%m%d_%H%M%SZ"
TAR_EXCLUDE="--exclude-vcs-ignores"
TAR_FLAGS=""
TAR_PARAMS=""
VERBOSE=0

YELLOW='\033[1;33m'
LGREEN='\033[1;32m'
LRED='\033[1;31m'
NC='\033[0m'

set -eo pipefail

usage() {
  echo "USAGE: archive [-p PREFIX] [-friv] [-t TAR_PARAM,...] [-d target_dir] <dir/file>"
  echo "   -d: where to create the archive"
  echo "   -f: force archiving (e.g. do not check for clean git repos)"
  echo "   -r: reduced timestamp (without H:M:S)"
  echo "   -t: add a tar parameter"
  echo "   -i: do NOT exclude files from .gitignore" 
  echo "   -v: verbose"
  exit 0
}

warn() {
  echo -ne "$YELLOW"
  echo -n $*
  echo -e "$NC"
}

ok() {
  echo -ne "$LGREEN"
  echo -n $*
  echo -e "$NC"
}

err () {
  echo -ne "$LRED"
  echo -n $*
  echo -e "$NC"
}


while getopts "fhrvp:d:t:" opt ; do
  case "$opt" in 
    f) FORCE=1 ;;
    v) VERBOSE=1 ; TAR_FLAGS="v" ;;
    i) TAR_EXCLUDE="" ;;
    r) DATE_FORMAT="%Y-%m-%d" ;;

    p) PREFIX="$OPTARG" ;;
    d) TARGET_DIR="$OPTARG" ;;
    t) TAR_PARAMS="$TAR_PARAMS $OPTARG" ;;

    h) usage ; exit 0 ;;
  esac
done
shift $((OPTIND-1))

[[ -z "$1" ]] && usage

ARCHIVE_NAME="${PREFIX}$(basename $1).$(date -u +$DATE_FORMAT).tar.xz"
ARCHIVE_FULL="$TARGET_DIR/$ARCHIVE_NAME"
if [[ -f "$ARCHIVE_FULL" ]] ; then
  if [[ $FORCE == 0 ]] ; then
    err "ERROR: archive '$ARCHIVE_FULL' already exists. aborting."
    exit -2
  else
    warn "WARN: deleting previous archive: $ARCHIVE_FULL"
    rm -rf "$ARCHIVE_FULL"
  fi
fi
  
[[ -z "$1" ]] && usage

set -u

if [[ -d "$1/.git" ]] ; then
  echo "INFO: Found git repo in $1"
  # check if git repo is up-to-date and clean
  GO_BACK="$PWD"
  cd "$1"
  if [[ FORCE == 0 && ! -z "$(git status --porcelain)" ]] ; then
    echo "ERROR: repo not clean. Use -f or fix this. Aborting."
    exit -1
  fi
  BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [[ ! "$BRANCH" == "main" && ! "$BRANCH" == "master" ]] ; then
    warn "WARN: active branch: $BRANCH"
  else
    echo "INFO: active branch: $BRANCH"
  fi
  echo "INFO: executing git pull"
  git pull > /dev/null
  cd "$GO_BACK"
fi

echo -n "INFO: creating archive ... "
tar ${TAR_FLAGS}cJf "$ARCHIVE_FULL" $TAR_PARAMS "$1"
if [[ $? == 0 ]] ; then 
  ok OK
else
  err ERROR
fi
echo "INFO: archive: $ARCHIVE_FULL"
echo "DONE."
