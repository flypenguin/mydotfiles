#!/usr/bin/env python3

import hashlib
import io
import os
import re
import stat
import subprocess
import sys
import tarfile
import time
import zipfile
from argparse import ArgumentParser
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime as dt
from os import walk
from os.path import join, relpath
from pathlib import Path
from typing import Tuple, Union


DEFAULT_EXCLUDE = ["\\.DS_Store"]
STAT644 = stat.S_IWUSR | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
config = None
exclude_patterns = []


class ArchiveFile:
    def __init__(
        self,
        src_dir: Union[Path, str],
        *,
        compression: int = 6,
        create_file_list=True,
        create_archive_checksum=True,
        include_checksum_file=True,
        checksum_type="md5",
    ):
        self.checksum_file_text = ""
        self.file_list_text = f"created @ {dt.now()}\n\n"
        self.compression = compression
        self.include_checksum_file = include_checksum_file
        self.checksum_type = checksum_type
        self.create_file_list = create_file_list
        self.create_archive_checksum = create_archive_checksum
        self.src_dir = Path(src_dir)
        self.tgt_dir = Path(str(self.src_dir) + ".pack")
        self.archive_file = self.tgt_dir / (self.src_dir.name + self.SUFFIX)
        self.is_unix = sys.platform in ("darwin", "linux")

    def _add_symlink_file(self, file_to_add: Union[Path, str], archive_filename=None):
        raise NotImplementedError("ArchiveFile._add_file()")

    def _add_file(self, file_to_add: Union[Path, str], archive_filename=None):
        raise NotImplementedError("ArchiveFile._add_file()")

    def _add_content(
        self,
        archive_filename: Union[Path, str],
        content: Union[bytes, str],
    ):
        raise NotImplementedError("ArchiveFile._add_content()")

    def _prepare(self):
        raise NotImplementedError("ArchiveFile._prepare()")

    def _finalize(self):
        raise NotImplementedError("ArchiveFile._finalize()")

    def add_file(self, file_to_add: Union[Path, str]):
        file_to_add = Path(file_to_add)
        rp = relpath(file_to_add, start=self.src_dir)
        is_link = os.path.islink(file_to_add)
        if self.create_file_list:
            self.file_list_text += f"{rp}{' [SYMLINK]' if is_link else ''}\n"
        if self.include_checksum_file and not is_link:
            with open(file_to_add, "rb") as infile:
                self.checksum_file_text += f"{hashlib.file_digest(infile, self.checksum_type).hexdigest()}  {rp}\n"
        if is_link:
            self._add_symlink_file(file_to_add, archive_filename=rp)
        else:
            self._add_file(file_to_add, archive_filename=rp)

    def __enter__(self):
        archive_file = self.archive_file
        archive_file.parent.mkdir(parents=True, exist_ok=True)
        archive_file.unlink(missing_ok=True)
        self._prepare()
        return self

    def __exit__(self, *args):
        if self.include_checksum_file:
            self._add_content(
                f"{self.checksum_type.upper()}SUMS.txt", self.checksum_file_text
            )
        self._finalize()

        if self.create_file_list:
            file_list = self.tgt_dir / (self.archive_file.name + ".txt")
            with open(file_list, "w") as outfile:
                outfile.write(self.file_list_text)

        if self.create_archive_checksum:
            with (
                open(f"{self.archive_file}.{self.checksum_type}", "w") as outfile,
                open(self.archive_file, "rb") as infile,
            ):
                outfile.write(
                    f"{hashlib.file_digest(infile, self.checksum_type).hexdigest()}  {self.archive_file.name}\n"
                )


class ZipArchive(ArchiveFile):
    SUFFIX = ".zip"

    def _prepare(self):
        self.archive = zipfile.ZipFile(
            self.archive_file,
            mode="w",
            compression=(
                zipfile.ZIP_DEFLATED if self.compression else zipfile.ZIP_STORED
            ),
            compresslevel=self.compression,
        )

    def _finalize(self):
        self.archive.close()

    def _add_content(
        self,
        archive_filename: Union[Path, str],
        content: Union[bytes, str],
    ):
        self.archive.writestr(str(archive_filename), data=content)

    def _add_symlink_file(self, file_to_add: Union[Path, str], archive_filename=None):
        # see https://stackoverflow.com/a/65817451
        link_target = os.readlink(file_to_add)
        zipInfo  = zipfile.ZipInfo(str(archive_filename or symlink_file))
        # System which created ZIP archive, 3 = Unix; 0 = Windows
        zipInfo.create_system = 3
        unix_st_mode = (
            stat.S_IFLNK |
            stat.S_IRUSR |
            stat.S_IWUSR |
            stat.S_IXUSR |
            stat.S_IRGRP |
            stat.S_IWGRP |
            stat.S_IXGRP |
            stat.S_IROTH |
            stat.S_IWOTH |
            stat.S_IXOTH
        )
        # The Python zipfile module accepts the 16-bit "Mode" field (that stores
        # st_mode field from struct stat, containing user/group/other permissions,
        # setuid/setgid and symlink info, etc) of the ASi extra block for Unix as
        # bits 16-31 of the external_attr
        zipInfo.external_attr = unix_st_mode << 16
        self.archive.writestr(zipInfo, link_target)

    def _add_file(self, file_to_add: Union[Path, str], archive_filename=None):
        self.archive.write(file_to_add, arcname=archive_filename)


class TarArchive(ArchiveFile):
    SUFFIX = ".tgz"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.compression == 0:
            self.archive_file = self.tgt_dir / (self.src_dir.name + ".tar")

    def _prepare(self):
        if self.compression:
            tar_mode = "w:gz"
            tar_params = {"compresslevel": self.compression}
        else:
            tar_mode = "w"
            tar_params = {}
        self.archive = tarfile.open(str(self.archive_file), mode=tar_mode, **tar_params)

    def _finalize(self):
        self.archive.close()

    def _add_content(
        self,
        archive_filename: Union[Path, str],
        content: Union[bytes, str],
    ):
        if isinstance(content, str):
            content = content.encode("utf-8")
        ti = tarfile.TarInfo(name=str(archive_filename))
        ti.size = len(content)
        ti.mtime = int(time.time())
        ti.mode = STAT644
        self.archive.addfile(ti, fileobj=io.BytesIO(content))

    def _add_file(self, file_to_add: Union[Path, str], archive_filename=None):
        self.archive.add(file_to_add, arcname=archive_filename)


# https://stackoverflow.com/a/34482761
def progressbar(it, prefix="", size=60, out=sys.stdout, num_items=0):  # Python3.3+
    count = num_items or len(it)

    def show(j):
        x = int(size * j / count)
        print(
            "{}[{}{}] {}/{}".format(prefix, "#" * x, "." * (size - x), j, count),
            end="\r",
            file=out,
            flush=True,
        )

    show(0)
    for i, item in enumerate(it):
        yield item
        show(i + 1)
    print("", flush=True, file=out)


def compress_directory(dir_to_compress: Path):
    dst_dir = Path(str(dir_to_compress) + ".pack")
    files_to_add = []
    for dirpath, dirs, files in walk(dir_to_compress):
        files = [Path(join(dirpath, f)) for f in sorted(files)]
        if config.no_hidden:
            # https://stackoverflow.com/a/19859907/902327
            dirs[:] = [d for d in dirs if not d.startswith(".")]
            files = [f for f in files if not f.name.startswith(".")]
        files_to_add += files

    tmp = []
    for file_to_add in files_to_add:
        for pattern in exclude_patterns:
            if not pattern.search(str(file_to_add)):
                tmp.append(file_to_add)
    files_to_add = tmp

    if not files_to_add:
        print(f"Nothing to be done for '{dir_to_compress.name}'.")
        return

    platform = sys.platform
    ArchiveClass = ZipArchive if config.type == "zip" else TarArchive
    with ArchiveClass(dir_to_compress, compression=config.level) as archive:
        for file_to_add in progressbar(files_to_add, f"{archive.archive_file.name} "):
            archive.add_file(file_to_add)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("dirs", nargs="+", type=Path)
    parser.add_argument(
        "-l", "--level", default=6, type=int, help=f"set compression level (default: 6)"
    )
    parser.add_argument(
        "--no-hidden",
        action="store_true",
        default=False,
        help=f"do not store hidden files (default: False)",
    )
    parser.add_argument(
        "-t",
        "--type",
        choices=("zip", "tar"),
        default="zip",
        help=f"specify archive format (default: zip)",
    )
    parser.add_argument(
        "-x",
        "--exclude",
        nargs="*",
        default=[],
        help=f"specify regex exclude patterns",
    )
    parser.add_argument(
        "-c",
        "--checksum-type",
        default="md5",
        help=f"specify checksum type",
    )
    config = parser.parse_args()

    exclude_patterns = [
        re.compile(pattern) for pattern in DEFAULT_EXCLUDE + config.exclude
    ]

    for dir_to_compress in config.dirs:
        if not dir_to_compress.is_dir():
            print(f"Not a directory: {dir_to_compress}")
            sys.exit()

    for dir_to_compress in config.dirs:
        compress_directory(dir_to_compress)
